#!/usr/bin/env node

/**
 * Module dependencies.
 */

try {
  var stylus = require('stylus');
} catch (err) {
  var stylus = require('../lib/stylus');
}

/**
 * Arguments.
 */

var args = process.argv.slice(2);

/**
 * Compare flag.
 */

var compare = false;

/**
 * Compress flag.
 */

var compress = false;

/**
 * CSS conversion flag.
 */

var convertCSS = false;

/**
 * Usage docs.
 */

var usage = [
    ''
  , '  Usage: stylus [options] [< in [> out]]'
  , ''
  , '  Options:'
  , ''
  , '    -c, --css       Convert css input to stylus'
  , '    -C, --compress  Compress css output'
  , '    -d, --compare   Display input along with output'
  , '    -h, --help      Display help information'
  , ''
].join('\n');

/**
 * Handle arguments.
 */

var arg;
while (args.length) {
  arg = args.shift();
  switch (arg) {
    case '-h':
    case '--help':
      console.log(usage);
      process.exit(1);
    case '-d':
    case '--compare':
      compare = true;
      break;
    case '-C':
    case '--compress':
      compress = true;
      break;
    case '-c':
    case '--css':
      convertCSS = true;
      break;
  }
}

// Buffer stdin

var str = ''
  , stdin = process.openStdin();

stdin.setEncoding('utf8');
stdin.on('data', function(chunk){ str += chunk; });

// Convert css to stylus

if (convertCSS) {
  stdin.on('end', function(){
    var out = stylus.convertCSS(str);
    console.log(out);
  });
} else {
  stdin.on('end', function(){
    var options = {
        filename: 'stdin'
      , compress: compress
    };

    // Compile to css
    stylus(str, options).render(function(err, css){
      if (err) throw err;
      if (compare) {
        console.log('\n\x1b[1mInput:\x1b[0m');
        console.log(str);
        console.log('\n\x1b[1mOutput:\x1b[0m');
      }
      console.log(css);
      if (compare) console.log();
    });
  });
}
